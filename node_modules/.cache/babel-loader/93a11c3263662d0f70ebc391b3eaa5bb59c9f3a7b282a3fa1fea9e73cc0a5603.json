{"ast":null,"code":"var _jsxFileName = \"/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx\",\n  _s = $RefreshSig$();\n// /frontend/src/components/ChatInterface.jsx\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport WelcomeScreen from './WelcomeScreen';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport MessageInput from './MessageInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const {\n    theme,\n    toggleTheme\n  } = useTheme();\n  const {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    updateConversationFile\n  } = useConversations();\n\n  // This state holds a map of conversation IDs to their File objects for the current session.\n  // This is the key to fixing the state management issues.\n  const [fileCache, setFileCache] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const chatEndRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const activeConversation = conversations[activeConversationId];\n  const messages = useMemo(() => (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.messages) || [], [activeConversation]);\n\n  // Get the file for the current conversation from our session cache.\n  const activeFile = fileCache[activeConversationId];\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages.length, isLoading]);\n  const handleFileChange = file => {\n    if (file) {\n      const newConvId = createNewConversation(`Analysis of ${file.name}`);\n      updateConversationFile(newConvId, file.name); // Store file NAME in localStorage\n      setFileCache(prevCache => ({\n        ...prevCache,\n        [newConvId]: file\n      })); // Store actual FILE in session state\n    }\n  };\n  const handleSendMessage = async input => {\n    if (!input.trim() || isLoading) return;\n\n    // If there's no file for this conversation in our session cache, prompt the user.\n    if (!activeFile) {\n      addMessageToConversation(activeConversationId, {\n        id: `err_${Date.now()}`,\n        sender: 'bot',\n        text: \"It looks like the data file for this conversation isn't loaded in this session. Please click the paperclip icon to re-upload it and continue your analysis.\",\n        type: 'error'\n      });\n      return;\n    }\n    addMessageToConversation(activeConversationId, {\n      sender: 'user',\n      text: input,\n      type: 'text'\n    });\n    if (messages.length === 1) {\n      updateConversationTitle(activeConversationId, input);\n    }\n    setIsLoading(true);\n    const formData = new FormData();\n    formData.append('file', activeFile);\n    formData.append('query', input);\n    formData.append('conversation_id', activeConversationId);\n    try {\n      const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const err = await response.json();\n        throw new Error(err.detail || `HTTP error!`);\n      }\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n    } catch (error) {\n      addMessageToConversation(activeConversationId, {\n        sender: 'bot',\n        text: `Sorry, an error occurred: ${error.message}.`,\n        type: 'text'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // This function is for when a user clicks a history item that needs a file re-upload\n  const handleReUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  // We need a separate handler for re-uploading to an EXISTING conversation\n  const handleFileReUpload = file => {\n    if (file && activeConversationId) {\n      setFileCache(prevCache => ({\n        ...prevCache,\n        [activeConversationId]: file\n      }));\n      addMessageToConversation(activeConversationId, {\n        id: `msg_${Date.now()}`,\n        sender: 'bot',\n        text: `Re-loaded \"${file.name}\". You can now continue your analysis.`,\n        type: 'text'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen bg-white dark:bg-gray-950 text-gray-800 dark:text-gray-200 font-sans antialiased`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"file-upload\",\n      type: \"file\",\n      className: \"hidden\"\n      // Use a different handler for re-uploads vs new uploads\n      ,\n      onChange: e => activeConversation !== null && activeConversation !== void 0 && activeConversation.fileName ? handleFileReUpload(e.target.files[0]) : handleFileChange(e.target.files[0]),\n      accept: \".csv,.parquet\",\n      ref: fileInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: isHistoryOpen,\n      setIsOpen: setIsHistoryOpen,\n      conversations: conversations,\n      activeConversationId: activeConversationId,\n      setActiveConversationId: setActiveConversationId,\n      createNewConversation: createNewConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 flex flex-col items-center relative\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.title,\n        fileName: activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.fileName,\n        onHistoryClick: () => setIsHistoryOpen(true),\n        onThemeToggle: toggleTheme,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 w-full max-w-4xl overflow-y-auto px-4 pb-24 pt-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col space-y-8\",\n          children: [activeConversation ? messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            msg: msg\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 57\n          }, this)) : /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n            onUploadClick: () => fileInputRef.current.click()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 99\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(ChatMessage.Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: chatEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        isLoading: isLoading,\n        hasFileAssociated: !!(activeConversation !== null && activeConversation !== void 0 && activeConversation.fileName),\n        onUploadClick: handleReUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"Rau/kaH1TUzRDjQuwEXD22BOkEc=\", false, function () {\n  return [useTheme, useConversations];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","useTheme","useConversations","ChatMessage","WelcomeScreen","Sidebar","Header","MessageInput","jsxDEV","_jsxDEV","ChatInterface","_s","theme","toggleTheme","conversations","activeConversationId","setActiveConversationId","createNewConversation","addMessageToConversation","updateConversationTitle","updateConversationFile","fileCache","setFileCache","isLoading","setIsLoading","isHistoryOpen","setIsHistoryOpen","chatEndRef","fileInputRef","activeConversation","messages","activeFile","_chatEndRef$current","current","scrollIntoView","behavior","length","handleFileChange","file","newConvId","name","prevCache","handleSendMessage","input","trim","id","Date","now","sender","text","type","formData","FormData","append","response","fetch","method","body","ok","err","json","Error","detail","botResponse","error","message","handleReUpload","click","handleFileReUpload","className","children","onChange","e","fileName","target","files","accept","ref","_jsxFileName","lineNumber","columnNumber","isOpen","setIsOpen","title","onHistoryClick","onThemeToggle","map","msg","onUploadClick","Loading","onSendMessage","hasFileAssociated","_c","$RefreshReg$"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx"],"sourcesContent":["// /frontend/src/components/ChatInterface.jsx\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport WelcomeScreen from './WelcomeScreen';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport MessageInput from './MessageInput';\n\nconst ChatInterface = () => {\n  const { theme, toggleTheme } = useTheme();\n  const { \n    conversations, \n    activeConversationId, \n    setActiveConversationId, \n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    updateConversationFile\n  } = useConversations();\n  \n  // This state holds a map of conversation IDs to their File objects for the current session.\n  // This is the key to fixing the state management issues.\n  const [fileCache, setFileCache] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const chatEndRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  const activeConversation = conversations[activeConversationId];\n  const messages = useMemo(() => activeConversation?.messages || [], [activeConversation]);\n  \n  // Get the file for the current conversation from our session cache.\n  const activeFile = fileCache[activeConversationId];\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages.length, isLoading]);\n\n  const handleFileChange = (file) => {\n    if (file) {\n      const newConvId = createNewConversation(`Analysis of ${file.name}`);\n      updateConversationFile(newConvId, file.name); // Store file NAME in localStorage\n      setFileCache(prevCache => ({ ...prevCache, [newConvId]: file })); // Store actual FILE in session state\n    }\n  };\n\n  const handleSendMessage = async (input) => {\n    if (!input.trim() || isLoading) return;\n\n    // If there's no file for this conversation in our session cache, prompt the user.\n    if (!activeFile) {\n        addMessageToConversation(activeConversationId, {\n            id: `err_${Date.now()}`,\n            sender: 'bot',\n            text: \"It looks like the data file for this conversation isn't loaded in this session. Please click the paperclip icon to re-upload it and continue your analysis.\",\n            type: 'error' \n        });\n        return;\n    }\n\n    addMessageToConversation(activeConversationId, { sender: 'user', text: input, type: 'text' });\n    \n    if (messages.length === 1) {\n        updateConversationTitle(activeConversationId, input);\n    }\n\n    setIsLoading(true);\n    \n    const formData = new FormData();\n    formData.append('file', activeFile);\n    formData.append('query', input);\n    formData.append('conversation_id', activeConversationId);\n\n    try {\n      const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const err = await response.json();\n        throw new Error(err.detail || `HTTP error!`);\n      }\n\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n\n    } catch (error) {\n      addMessageToConversation(activeConversationId, { sender: 'bot', text: `Sorry, an error occurred: ${error.message}.`, type: 'text' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // This function is for when a user clicks a history item that needs a file re-upload\n  const handleReUpload = () => {\n      fileInputRef.current.click();\n  };\n  \n  // We need a separate handler for re-uploading to an EXISTING conversation\n  const handleFileReUpload = (file) => {\n      if (file && activeConversationId) {\n          setFileCache(prevCache => ({...prevCache, [activeConversationId]: file}));\n          addMessageToConversation(activeConversationId, {\n              id: `msg_${Date.now()}`,\n              sender: 'bot',\n              text: `Re-loaded \"${file.name}\". You can now continue your analysis.`,\n              type: 'text'\n          });\n      }\n  };\n\n\n  return (\n    <div className={`flex h-screen bg-white dark:bg-gray-950 text-gray-800 dark:text-gray-200 font-sans antialiased`}>\n      <input \n        id=\"file-upload\" \n        type=\"file\" \n        className=\"hidden\" \n        // Use a different handler for re-uploads vs new uploads\n        onChange={(e) => activeConversation?.fileName ? handleFileReUpload(e.target.files[0]) : handleFileChange(e.target.files[0])} \n        accept=\".csv,.parquet\"\n        ref={fileInputRef}\n      />\n      <Sidebar \n        isOpen={isHistoryOpen}\n        setIsOpen={setIsHistoryOpen}\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        setActiveConversationId={setActiveConversationId}\n        createNewConversation={createNewConversation}\n      />\n      <main className=\"flex-1 flex flex-col items-center relative\">\n        <Header \n          title={activeConversation?.title}\n          fileName={activeConversation?.fileName}\n          onHistoryClick={() => setIsHistoryOpen(true)}\n          onThemeToggle={toggleTheme}\n          theme={theme}\n        />\n        <div className=\"flex-1 w-full max-w-4xl overflow-y-auto px-4 pb-24 pt-8\">\n          <div className=\"flex flex-col space-y-8\">\n            {activeConversation ? messages.map((msg) => <ChatMessage key={msg.id} msg={msg} />) : <WelcomeScreen onUploadClick={() => fileInputRef.current.click()} />}\n            {isLoading && <ChatMessage.Loading />}\n            <div ref={chatEndRef} />\n          </div>\n        </div>\n        <MessageInput \n            onSendMessage={handleSendMessage} \n            isLoading={isLoading} \n            hasFileAssociated={!!activeConversation?.fileName}\n            onUploadClick={handleReUpload} \n        />\n      </main>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}