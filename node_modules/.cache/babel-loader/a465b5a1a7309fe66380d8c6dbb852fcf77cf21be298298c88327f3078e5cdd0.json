{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const STORAGE_KEY = 'ofm_sales_ai_conversations';\n// const ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation';\n\n// export function useConversations() {\n//   const [conversations, setConversations] = useState(() => {\n//     try {\n//       const saved = localStorage.getItem(STORAGE_KEY);\n//       return saved ? JSON.parse(saved) : {};\n//     } catch {\n//       return {};\n//     }\n//   });\n\n//   const [activeConversationId, setActiveConversationId] = useState(() => {\n//     try {\n//       return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n//     } catch {\n//       return null;\n//     }\n//   });\n\n//   useEffect(() => {\n//     try {\n//       localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n//     } catch {}\n//   }, [conversations]);\n\n//   useEffect(() => {\n//     try {\n//       if (activeConversationId) {\n//         localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n//       } else {\n//         localStorage.removeItem(ACTIVE_CONV_KEY);\n//       }\n//     } catch {}\n//   }, [activeConversationId]);\n\n//   const createNewConversation = (title = 'New Analysis') => {\n//     const id = uuidv4();\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: {\n//         id,\n//         title,\n//         messages: [\n//           { id: uuidv4(), sender: 'bot', text: 'How can I help you?', type: 'text' },\n//         ],\n//       },\n//     }));\n//     setActiveConversationId(id);\n//   };\n\n//   const addMessageToConversation = (id, msg) => {\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: {\n//         ...prev[id],\n//         messages: [...(prev[id]?.messages || []), { id: uuidv4(), ...msg }],\n//       },\n//     }));\n//   };\n\n//   const updateConversationTitle = (id, newTitle) => {\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: { ...prev[id], title: newTitle },\n//     }));\n//   };\n\n//   const deleteConversation = (id) => {\n//     setConversations(prev => {\n//       const newConvs = { ...prev };\n//       delete newConvs[id];\n//       return newConvs;\n//     });\n//     setActiveConversationId(prevId => (prevId === id ? null : prevId));\n//   };\n\n//   return {\n//     conversations,\n//     activeConversationId,\n//     setActiveConversationId,\n//     createNewConversation,\n//     addMessageToConversation,\n//     updateConversationTitle,\n//     deleteConversation,\n//   };\n// }\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nconst STORAGE_KEY = 'ofm_sales_ai_conversations_v2';\nconst ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation_v2';\nexport function useConversations() {\n  _s();\n  // Load conversations from localStorage on initial render\n  const [conversations, setConversations] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : {};\n    } catch {\n      console.error(\"Failed to parse conversations from localStorage.\");\n      return {};\n    }\n  });\n\n  // Load active conversation ID from localStorage\n  const [activeConversationId, setActiveConversationId] = useState(() => {\n    try {\n      return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n    } catch {\n      return null;\n    }\n  });\n\n  // Persist conversations to localStorage whenever they change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n    } catch {\n      console.error(\"Failed to save conversations to localStorage.\");\n    }\n  }, [conversations]);\n\n  // Persist active conversation ID to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      if (activeConversationId) {\n        localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n      } else {\n        localStorage.removeItem(ACTIVE_CONV_KEY);\n      }\n    } catch {\n      console.error(\"Failed to save active conversation ID to localStorage.\");\n    }\n  }, [activeConversationId]);\n\n  // Function to create a new conversation\n  const createNewConversation = useCallback((title = 'New Analysis') => {\n    const id = uuidv4();\n    const newConversation = {\n      id,\n      title,\n      messages: [{\n        id: uuidv4(),\n        sender: 'bot',\n        text: 'Hi! I am InsightAI. How can I help you analyze the OFM sales data today?',\n        type: 'text'\n      }],\n      lastModified: Date.now() // Track modification time for sorting\n    };\n    setConversations(prev => ({\n      ...prev,\n      [id]: newConversation\n    }));\n    setActiveConversationId(id);\n  }, []);\n\n  // Function to add a message to a specific conversation\n  const addMessageToConversation = useCallback((id, msg) => {\n    if (!id) return;\n    setConversations(prev => {\n      const conversation = prev[id];\n      if (!conversation) return prev;\n      return {\n        ...prev,\n        [id]: {\n          ...conversation,\n          messages: [...conversation.messages, {\n            id: uuidv4(),\n            ...msg\n          }],\n          lastModified: Date.now()\n        }\n      };\n    });\n  }, []);\n\n  // Function to update a conversation's title\n  const updateConversationTitle = useCallback((id, newTitle) => {\n    if (!id) return;\n    setConversations(prev => {\n      const conversation = prev[id];\n      if (!conversation) return prev;\n      return {\n        ...prev,\n        [id]: {\n          ...conversation,\n          title: newTitle,\n          lastModified: Date.now()\n        }\n      };\n    });\n  }, []);\n\n  // Function to delete a conversation\n  const deleteConversation = useCallback(id => {\n    setConversations(prev => {\n      const newConvs = {\n        ...prev\n      };\n      delete newConvs[id];\n      return newConvs;\n    });\n    // If the deleted conversation was active, select the most recent one or none\n    if (activeConversationId === id) {\n      const remainingConversations = Object.values(conversations).filter(c => c.id !== id).sort((a, b) => b.lastModified - a.lastModified);\n      setActiveConversationId(remainingConversations.length > 0 ? remainingConversations[0].id : null);\n    }\n  }, [activeConversationId, conversations]);\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation\n  };\n}\n_s(useConversations, \"nVGHAZDP6drobnmyv/ulk9waIdg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","v4","uuidv4","STORAGE_KEY","ACTIVE_CONV_KEY","useConversations","_s","conversations","setConversations","saved","localStorage","getItem","JSON","parse","console","error","activeConversationId","setActiveConversationId","setItem","stringify","removeItem","createNewConversation","title","id","newConversation","messages","sender","text","type","lastModified","Date","now","prev","addMessageToConversation","msg","conversation","updateConversationTitle","newTitle","deleteConversation","newConvs","remainingConversations","Object","values","filter","c","sort","a","b","length"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const STORAGE_KEY = 'ofm_sales_ai_conversations';\n// const ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation';\n\n// export function useConversations() {\n//   const [conversations, setConversations] = useState(() => {\n//     try {\n//       const saved = localStorage.getItem(STORAGE_KEY);\n//       return saved ? JSON.parse(saved) : {};\n//     } catch {\n//       return {};\n//     }\n//   });\n\n//   const [activeConversationId, setActiveConversationId] = useState(() => {\n//     try {\n//       return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n//     } catch {\n//       return null;\n//     }\n//   });\n\n//   useEffect(() => {\n//     try {\n//       localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n//     } catch {}\n//   }, [conversations]);\n\n//   useEffect(() => {\n//     try {\n//       if (activeConversationId) {\n//         localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n//       } else {\n//         localStorage.removeItem(ACTIVE_CONV_KEY);\n//       }\n//     } catch {}\n//   }, [activeConversationId]);\n\n//   const createNewConversation = (title = 'New Analysis') => {\n//     const id = uuidv4();\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: {\n//         id,\n//         title,\n//         messages: [\n//           { id: uuidv4(), sender: 'bot', text: 'How can I help you?', type: 'text' },\n//         ],\n//       },\n//     }));\n//     setActiveConversationId(id);\n//   };\n\n//   const addMessageToConversation = (id, msg) => {\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: {\n//         ...prev[id],\n//         messages: [...(prev[id]?.messages || []), { id: uuidv4(), ...msg }],\n//       },\n//     }));\n//   };\n\n//   const updateConversationTitle = (id, newTitle) => {\n//     setConversations(prev => ({\n//       ...prev,\n//       [id]: { ...prev[id], title: newTitle },\n//     }));\n//   };\n\n//   const deleteConversation = (id) => {\n//     setConversations(prev => {\n//       const newConvs = { ...prev };\n//       delete newConvs[id];\n//       return newConvs;\n//     });\n//     setActiveConversationId(prevId => (prevId === id ? null : prevId));\n//   };\n\n//   return {\n//     conversations,\n//     activeConversationId,\n//     setActiveConversationId,\n//     createNewConversation,\n//     addMessageToConversation,\n//     updateConversationTitle,\n//     deleteConversation,\n//   };\n// }\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst STORAGE_KEY = 'ofm_sales_ai_conversations_v2';\nconst ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation_v2';\n\nexport function useConversations() {\n  // Load conversations from localStorage on initial render\n  const [conversations, setConversations] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : {};\n    } catch {\n      console.error(\"Failed to parse conversations from localStorage.\");\n      return {};\n    }\n  });\n\n  // Load active conversation ID from localStorage\n  const [activeConversationId, setActiveConversationId] = useState(() => {\n    try {\n      return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n    } catch {\n      return null;\n    }\n  });\n\n  // Persist conversations to localStorage whenever they change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n    } catch {\n      console.error(\"Failed to save conversations to localStorage.\");\n    }\n  }, [conversations]);\n\n  // Persist active conversation ID to localStorage whenever it changes\n  useEffect(() => {\n    try {\n      if (activeConversationId) {\n        localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n      } else {\n        localStorage.removeItem(ACTIVE_CONV_KEY);\n      }\n    } catch {\n      console.error(\"Failed to save active conversation ID to localStorage.\");\n    }\n  }, [activeConversationId]);\n\n  // Function to create a new conversation\n  const createNewConversation = useCallback((title = 'New Analysis') => {\n    const id = uuidv4();\n    const newConversation = {\n      id,\n      title,\n      messages: [\n        { id: uuidv4(), sender: 'bot', text: 'Hi! I am InsightAI. How can I help you analyze the OFM sales data today?', type: 'text' },\n      ],\n      lastModified: Date.now(), // Track modification time for sorting\n    };\n    setConversations(prev => ({ ...prev, [id]: newConversation }));\n    setActiveConversationId(id);\n  }, []);\n\n  // Function to add a message to a specific conversation\n  const addMessageToConversation = useCallback((id, msg) => {\n    if (!id) return;\n    setConversations(prev => {\n      const conversation = prev[id];\n      if (!conversation) return prev;\n      return {\n        ...prev,\n        [id]: {\n          ...conversation,\n          messages: [...conversation.messages, { id: uuidv4(), ...msg }],\n          lastModified: Date.now(),\n        },\n      };\n    });\n  }, []);\n\n  // Function to update a conversation's title\n  const updateConversationTitle = useCallback((id, newTitle) => {\n    if (!id) return;\n    setConversations(prev => {\n      const conversation = prev[id];\n      if (!conversation) return prev;\n      return {\n        ...prev,\n        [id]: { ...conversation, title: newTitle, lastModified: Date.now() },\n      };\n    });\n  }, []);\n\n  // Function to delete a conversation\n  const deleteConversation = useCallback((id) => {\n    setConversations(prev => {\n      const newConvs = { ...prev };\n      delete newConvs[id];\n      return newConvs;\n    });\n    // If the deleted conversation was active, select the most recent one or none\n    if (activeConversationId === id) {\n        const remainingConversations = Object.values(conversations)\n            .filter(c => c.id !== id)\n            .sort((a,b) => b.lastModified - a.lastModified);\n      \n        setActiveConversationId(remainingConversations.length > 0 ? remainingConversations[0].id : null);\n    }\n  }, [activeConversationId, conversations]);\n\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}