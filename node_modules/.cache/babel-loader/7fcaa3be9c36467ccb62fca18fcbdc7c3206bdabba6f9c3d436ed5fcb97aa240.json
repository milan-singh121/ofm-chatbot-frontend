{"ast":null,"code":"var _s = $RefreshSig$();\n// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useLocalStorage('conversations', {});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  useEffect(() => {\n    const conversationKeys = Object.keys(conversations);\n    if (conversationKeys.length > 0 && (!activeConversationId || !conversations[activeConversationId])) {\n      setActiveConversationId(conversationKeys.sort().reverse()[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const createNewConversation = (title = \"New Conversation\") => {\n    const newId = `conv_${Date.now()}`;\n    const newConversation = {\n      id: newId,\n      title: title,\n      messages: [],\n      file: null // Add a file property\n    };\n    setConversations(prev => ({\n      ...prev,\n      [newId]: newConversation\n    }));\n    setActiveConversationId(newId);\n    return newId; // Return the new ID so we can use it immediately\n  };\n  const addMessageToConversation = (convId, message) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].messages.push(message);\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationTitle = (convId, title) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].title = title.substring(0, 50);\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationFile = (convId, file) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].file = file;\n        // Add an initial message\n        newConversations[convId].messages.push({\n          sender: 'bot',\n          text: `Successfully loaded \"${file.name}\".\\n\\nHow can I help you analyze this data?`,\n          type: 'text'\n        });\n      }\n      return newConversations;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    updateConversationFile\n  };\n};\n_s(useConversations, \"rzF9N77Fnhz6LMLGQDybowyhlDc=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useLocalStorage","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","conversationKeys","Object","keys","length","sort","reverse","createNewConversation","title","newId","Date","now","newConversation","id","messages","file","prev","addMessageToConversation","convId","message","newConversations","push","updateConversationTitle","substring","updateConversationFile","sender","text","name","type"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport const useConversations = () => {\n    const [conversations, setConversations] = useLocalStorage('conversations', {});\n    const [activeConversationId, setActiveConversationId] = useState(null);\n\n    useEffect(() => {\n        const conversationKeys = Object.keys(conversations);\n        if (conversationKeys.length > 0 && (!activeConversationId || !conversations[activeConversationId])) {\n            setActiveConversationId(conversationKeys.sort().reverse()[0]);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const createNewConversation = (title = \"New Conversation\") => {\n        const newId = `conv_${Date.now()}`;\n        const newConversation = {\n            id: newId,\n            title: title,\n            messages: [],\n            file: null // Add a file property\n        };\n        setConversations(prev => ({ ...prev, [newId]: newConversation }));\n        setActiveConversationId(newId);\n        return newId; // Return the new ID so we can use it immediately\n    };\n\n    const addMessageToConversation = (convId, message) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].messages.push(message);\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationTitle = (convId, title) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].title = title.substring(0, 50);\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationFile = (convId, file) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].file = file;\n                // Add an initial message\n                newConversations[convId].messages.push({\n                    sender: 'bot',\n                    text: `Successfully loaded \"${file.name}\".\\n\\nHow can I help you analyze this data?`,\n                    type: 'text'\n                });\n            }\n            return newConversations;\n        });\n    };\n\n    return {\n        conversations,\n        activeConversationId,\n        setActiveConversationId,\n        createNewConversation,\n        addMessageToConversation,\n        updateConversationTitle,\n        updateConversationFile\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}