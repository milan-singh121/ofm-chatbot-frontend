{"ast":null,"code":"var _jsxFileName = \"/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import React, { useState, useRef, useEffect, useMemo } from 'react';\n// import { useTheme } from '../contexts/ThemeContext';\n// import { useConversations } from '../hooks/useConversations';\n// import ChatMessage from './ChatMessage';\n// import Sidebar from './Sidebar';\n// import Header from './Header';\n// import MessageInput from './MessageInput';\n\n// const ChatInterface = () => {\n//   const { theme, toggleTheme } = useTheme();\n//   const {\n//     conversations,\n//     activeConversationId,\n//     setActiveConversationId,\n//     createNewConversation,\n//     addMessageToConversation,\n//     updateConversationTitle,\n//     deleteConversation,\n//   } = useConversations();\n\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//   const chatEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (Object.keys(conversations).length === 0) {\n//       createNewConversation(\"OFM Sales Analysis\");\n//     }\n//   }, [conversations, createNewConversation]);\n\n//   const activeConversation = useMemo(\n//     () => conversations[activeConversationId],\n//     [conversations, activeConversationId]\n//   );\n//   const messages = useMemo(() => activeConversation?.messages || [], [activeConversation]);\n\n//   useEffect(() => {\n//     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages.length, isLoading]);\n\n//   const handleSendMessage = async (input) => {\n//     if (!input.trim() || isLoading || !activeConversationId) return;\n//     addMessageToConversation(activeConversationId, { sender: 'user', text: input, type: 'text' });\n\n//     if (messages.length === 1) {\n//       updateConversationTitle(activeConversationId, input);\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append('query', input);\n//     formData.append('conversation_id', activeConversationId);\n\n//     const historyForAPI = messages.slice(1).map(msg => ({\n//       role: msg.sender === 'bot' ? 'bot' : 'user',\n//       content: msg.text\n//     }));\n//     formData.append('history', JSON.stringify(historyForAPI));\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/api/chat', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       if (!response.ok) {\n//         const err = await response.json().catch(() => ({ detail: `HTTP error! Status: ${response.status}` }));\n//         throw new Error(err.detail || 'Unknown error occurred.');\n//       }\n//       const botResponse = await response.json();\n//       addMessageToConversation(activeConversationId, botResponse);\n//     } catch (error) {\n//       addMessageToConversation(activeConversationId, {\n//         sender: 'bot',\n//         text: `Sorry, an error occurred: ${error.message}. Please check server connection.`,\n//         type: 'error'\n//       });\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={`flex h-screen w-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased`}>\n//       <Sidebar\n//         isOpen={isSidebarOpen}\n//         setIsOpen={setIsSidebarOpen}\n//         conversations={conversations}\n//         activeConversationId={activeConversationId}\n//         setActiveConversationId={(id) => { setActiveConversationId(id); setIsSidebarOpen(false); }}\n//         createNewConversation={createNewConversation}\n//         deleteConversation={deleteConversation}\n//       />\n//       <main className=\"flex-1 flex flex-col min-h-screen bg-white dark:bg-gray-950 transition-all relative\">\n//         <Header\n//           title={activeConversation?.title || \"OFM Sales AI\"}\n//           onHistoryClick={() => setIsSidebarOpen(!isSidebarOpen)}\n//           onThemeToggle={toggleTheme}\n//           theme={theme}\n//         />\n//         <div className=\"flex-1 overflow-y-auto px-5 pt-6 pb-32\">\n//           <div className=\"flex flex-col space-y-8 max-w-4xl mx-auto w-full\">\n//             {activeConversation ? messages.map(msg => (\n//               <ChatMessage key={msg.id} msg={msg} />\n//             )) : (\n//               <div className=\"text-center p-8 text-gray-500 dark:text-gray-400 italic\">\n//                 Select or start a conversation to begin.\n//               </div>\n//             )}\n//             {isLoading && <ChatMessage.Loading />}\n//             <div ref={chatEndRef} />\n//           </div>\n//         </div>\n//         <div className=\"fixed bottom-0 left-0 right-0 z-30 bg-white dark:bg-gray-950 border-t border-gray-300 dark:border-gray-700 p-4\">\n//           <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} disabled={!activeConversationId} />\n//         </div>\n//       </main>\n//     </div>\n//   );\n// };\n\n// export default ChatInterface;\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport Sidebar from './Sidebar';\nimport MessageInput from './MessageInput';\nimport { Menu, Sun, Moon } from 'lucide-react';\n\n// A simple header component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = ({\n  title,\n  onHistoryClick,\n  onThemeToggle,\n  theme\n}) => /*#__PURE__*/_jsxDEV(\"header\", {\n  className: \"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800 flex-shrink-0\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onHistoryClick,\n    className: \"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\",\n    children: /*#__PURE__*/_jsxDEV(Menu, {\n      size: 24\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"text-lg font-semibold truncate\",\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onThemeToggle,\n    className: \"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\",\n    children: theme === 'dark' ? /*#__PURE__*/_jsxDEV(Sun, {\n      size: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(Moon, {\n      size: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 47\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 132,\n  columnNumber: 3\n}, this);\n\n// A simple theme context\n_c = Header;\nconst ThemeContext = /*#__PURE__*/React.createContext();\nexport const useTheme = () => {\n  _s();\n  return React.useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_s2(ThemeProvider, \"sdN5stDE6MXWaThZodKo/2BHQLs=\");\n_c2 = ThemeProvider;\nconst ChatInterface = () => {\n  _s3();\n  const {\n    theme,\n    toggleTheme\n  } = useTheme();\n  const {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation\n  } = useConversations();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const chatEndRef = useRef(null);\n  useEffect(() => {\n    if (Object.keys(conversations).length === 0) {\n      createNewConversation(\"OFM Sales Analysis\");\n    }\n  }, [conversations, createNewConversation]);\n  const activeConversation = useMemo(() => conversations[activeConversationId], [conversations, activeConversationId]);\n  const messages = useMemo(() => (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.messages) || [], [activeConversation]);\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isLoading]);\n  const handleSendMessage = async input => {\n    if (!input.trim() || isLoading || !activeConversationId) return;\n    const userMessage = {\n      sender: 'user',\n      text: input,\n      type: 'text'\n    };\n    addMessageToConversation(activeConversationId, userMessage);\n    if (activeConversation.messages.length === 1) {\n      updateConversationTitle(activeConversationId, input);\n    }\n    setIsLoading(true);\n    const formData = new FormData();\n    formData.append('query', input);\n    formData.append('conversation_id', activeConversationId);\n\n    // FIX: Defensively map 'bot' to 'assistant' to handle old data from localStorage.\n    // This ensures that any outdated role identifiers are corrected before being sent to the API.\n    const historyForAPI = activeConversation.messages.map(msg => ({\n      role: msg.sender === 'bot' ? 'assistant' : msg.sender,\n      content: msg.text\n    }));\n    formData.append('history', JSON.stringify(historyForAPI));\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/chat', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({\n          detail: `HTTP error! Status: ${response.status}`\n        }));\n        throw new Error(err.detail || 'An unknown error occurred.');\n      }\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n    } catch (error) {\n      addMessageToConversation(activeConversationId, {\n        sender: 'assistant',\n        // Send errors as the assistant\n        text: `Sorry, an error occurred: ${error.message}. Please check the server connection and logs.`,\n        type: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen w-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: isSidebarOpen,\n      setIsOpen: setIsSidebarOpen,\n      conversations: conversations,\n      activeConversationId: activeConversationId,\n      setActiveConversationId: id => {\n        setActiveConversationId(id);\n        setIsSidebarOpen(false);\n      },\n      createNewConversation: () => {\n        createNewConversation();\n        setIsSidebarOpen(false);\n      },\n      deleteConversation: deleteConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 flex flex-col h-screen bg-white dark:bg-gray-950 transition-all\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.title) || \"OFM Sales AI\",\n        onHistoryClick: () => setIsSidebarOpen(true),\n        onThemeToggle: toggleTheme,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto p-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col space-y-8 max-w-4xl mx-auto w-full\",\n          children: [activeConversation ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            msg: msg\n          }, msg.id || index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center p-8 text-gray-500 dark:text-gray-400 italic\",\n            children: \"Select or start a new conversation from the menu.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(ChatMessage.Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: chatEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950\",\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          onSendMessage: handleSendMessage,\n          isLoading: isLoading,\n          disabled: !activeConversationId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s3(ChatInterface, \"KxPaF48fgsqsThTStZjtwZcZk8o=\", false, function () {\n  return [useTheme, useConversations];\n});\n_c3 = ChatInterface;\nconst App = () => /*#__PURE__*/_jsxDEV(ThemeProvider, {\n  children: /*#__PURE__*/_jsxDEV(ChatInterface, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 292,\n  columnNumber: 5\n}, this);\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"ThemeProvider\");\n$RefreshReg$(_c3, \"ChatInterface\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","useConversations","ChatMessage","Sidebar","MessageInput","Menu","Sun","Moon","jsxDEV","_jsxDEV","Header","title","onHistoryClick","onThemeToggle","theme","className","children","onClick","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","ThemeContext","createContext","useTheme","_s","useContext","ThemeProvider","_s2","setTheme","localStorage","getItem","root","window","document","documentElement","classList","remove","add","setItem","toggleTheme","prevTheme","Provider","value","_c2","ChatInterface","_s3","conversations","activeConversationId","setActiveConversationId","createNewConversation","addMessageToConversation","updateConversationTitle","deleteConversation","isLoading","setIsLoading","isSidebarOpen","setIsSidebarOpen","chatEndRef","Object","keys","length","activeConversation","messages","_chatEndRef$current","current","scrollIntoView","behavior","handleSendMessage","input","trim","userMessage","sender","text","type","formData","FormData","append","historyForAPI","map","msg","role","content","JSON","stringify","response","fetch","method","body","ok","err","json","catch","detail","status","Error","botResponse","error","message","isOpen","setIsOpen","id","index","Loading","ref","onSendMessage","disabled","_c3","App","_c4","$RefreshReg$"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect, useMemo } from 'react';\n// import { useTheme } from '../contexts/ThemeContext';\n// import { useConversations } from '../hooks/useConversations';\n// import ChatMessage from './ChatMessage';\n// import Sidebar from './Sidebar';\n// import Header from './Header';\n// import MessageInput from './MessageInput';\n\n// const ChatInterface = () => {\n//   const { theme, toggleTheme } = useTheme();\n//   const {\n//     conversations,\n//     activeConversationId,\n//     setActiveConversationId,\n//     createNewConversation,\n//     addMessageToConversation,\n//     updateConversationTitle,\n//     deleteConversation,\n//   } = useConversations();\n\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//   const chatEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (Object.keys(conversations).length === 0) {\n//       createNewConversation(\"OFM Sales Analysis\");\n//     }\n//   }, [conversations, createNewConversation]);\n\n//   const activeConversation = useMemo(\n//     () => conversations[activeConversationId],\n//     [conversations, activeConversationId]\n//   );\n//   const messages = useMemo(() => activeConversation?.messages || [], [activeConversation]);\n\n//   useEffect(() => {\n//     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages.length, isLoading]);\n\n//   const handleSendMessage = async (input) => {\n//     if (!input.trim() || isLoading || !activeConversationId) return;\n//     addMessageToConversation(activeConversationId, { sender: 'user', text: input, type: 'text' });\n\n//     if (messages.length === 1) {\n//       updateConversationTitle(activeConversationId, input);\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append('query', input);\n//     formData.append('conversation_id', activeConversationId);\n\n//     const historyForAPI = messages.slice(1).map(msg => ({\n//       role: msg.sender === 'bot' ? 'bot' : 'user',\n//       content: msg.text\n//     }));\n//     formData.append('history', JSON.stringify(historyForAPI));\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:8000/api/chat', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       if (!response.ok) {\n//         const err = await response.json().catch(() => ({ detail: `HTTP error! Status: ${response.status}` }));\n//         throw new Error(err.detail || 'Unknown error occurred.');\n//       }\n//       const botResponse = await response.json();\n//       addMessageToConversation(activeConversationId, botResponse);\n//     } catch (error) {\n//       addMessageToConversation(activeConversationId, {\n//         sender: 'bot',\n//         text: `Sorry, an error occurred: ${error.message}. Please check server connection.`,\n//         type: 'error'\n//       });\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={`flex h-screen w-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased`}>\n//       <Sidebar\n//         isOpen={isSidebarOpen}\n//         setIsOpen={setIsSidebarOpen}\n//         conversations={conversations}\n//         activeConversationId={activeConversationId}\n//         setActiveConversationId={(id) => { setActiveConversationId(id); setIsSidebarOpen(false); }}\n//         createNewConversation={createNewConversation}\n//         deleteConversation={deleteConversation}\n//       />\n//       <main className=\"flex-1 flex flex-col min-h-screen bg-white dark:bg-gray-950 transition-all relative\">\n//         <Header\n//           title={activeConversation?.title || \"OFM Sales AI\"}\n//           onHistoryClick={() => setIsSidebarOpen(!isSidebarOpen)}\n//           onThemeToggle={toggleTheme}\n//           theme={theme}\n//         />\n//         <div className=\"flex-1 overflow-y-auto px-5 pt-6 pb-32\">\n//           <div className=\"flex flex-col space-y-8 max-w-4xl mx-auto w-full\">\n//             {activeConversation ? messages.map(msg => (\n//               <ChatMessage key={msg.id} msg={msg} />\n//             )) : (\n//               <div className=\"text-center p-8 text-gray-500 dark:text-gray-400 italic\">\n//                 Select or start a conversation to begin.\n//               </div>\n//             )}\n//             {isLoading && <ChatMessage.Loading />}\n//             <div ref={chatEndRef} />\n//           </div>\n//         </div>\n//         <div className=\"fixed bottom-0 left-0 right-0 z-30 bg-white dark:bg-gray-950 border-t border-gray-300 dark:border-gray-700 p-4\">\n//           <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} disabled={!activeConversationId} />\n//         </div>\n//       </main>\n//     </div>\n//   );\n// };\n\n// export default ChatInterface;\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport Sidebar from './Sidebar';\nimport MessageInput from './MessageInput';\nimport { Menu, Sun, Moon } from 'lucide-react';\n\n// A simple header component\nconst Header = ({ title, onHistoryClick, onThemeToggle, theme }) => (\n  <header className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800 flex-shrink-0\">\n    <button onClick={onHistoryClick} className=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\">\n      <Menu size={24} />\n    </button>\n    <h1 className=\"text-lg font-semibold truncate\">{title}</h1>\n    <button onClick={onThemeToggle} className=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700\">\n      {theme === 'dark' ? <Sun size={20} /> : <Moon size={20} />}\n    </button>\n  </header>\n);\n\n// A simple theme context\nconst ThemeContext = React.createContext();\nexport const useTheme = () => React.useContext(ThemeContext);\n\nexport const ThemeProvider = ({ children }) => {\n    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');\n\n    useEffect(() => {\n        const root = window.document.documentElement;\n        root.classList.remove('light', 'dark');\n        root.classList.add(theme);\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    const toggleTheme = () => {\n        setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n    };\n\n    return (\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n\n\nconst ChatInterface = () => {\n  const { theme, toggleTheme } = useTheme();\n  const {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation,\n  } = useConversations();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const chatEndRef = useRef(null);\n\n  useEffect(() => {\n    if (Object.keys(conversations).length === 0) {\n      createNewConversation(\"OFM Sales Analysis\");\n    }\n  }, [conversations, createNewConversation]);\n\n  const activeConversation = useMemo(\n    () => conversations[activeConversationId],\n    [conversations, activeConversationId]\n  );\n  const messages = useMemo(() => activeConversation?.messages || [], [activeConversation]);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isLoading]);\n\n  const handleSendMessage = async (input) => {\n    if (!input.trim() || isLoading || !activeConversationId) return;\n\n    const userMessage = { sender: 'user', text: input, type: 'text' };\n    addMessageToConversation(activeConversationId, userMessage);\n\n    if (activeConversation.messages.length === 1) {\n      updateConversationTitle(activeConversationId, input);\n    }\n\n    setIsLoading(true);\n\n    const formData = new FormData();\n    formData.append('query', input);\n    formData.append('conversation_id', activeConversationId);\n\n    // FIX: Defensively map 'bot' to 'assistant' to handle old data from localStorage.\n    // This ensures that any outdated role identifiers are corrected before being sent to the API.\n    const historyForAPI = activeConversation.messages\n      .map(msg => ({\n        role: msg.sender === 'bot' ? 'assistant' : msg.sender,\n        content: msg.text\n      }));\n      \n    formData.append('history', JSON.stringify(historyForAPI));\n\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/chat', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({ detail: `HTTP error! Status: ${response.status}` }));\n        throw new Error(err.detail || 'An unknown error occurred.');\n      }\n\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n\n    } catch (error) {\n      addMessageToConversation(activeConversationId, {\n        sender: 'assistant', // Send errors as the assistant\n        text: `Sorry, an error occurred: ${error.message}. Please check the server connection and logs.`,\n        type: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className={`flex h-screen w-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased`}>\n      <Sidebar\n        isOpen={isSidebarOpen}\n        setIsOpen={setIsSidebarOpen}\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        setActiveConversationId={(id) => { setActiveConversationId(id); setIsSidebarOpen(false); }}\n        createNewConversation={() => { createNewConversation(); setIsSidebarOpen(false); }}\n        deleteConversation={deleteConversation}\n      />\n      <main className=\"flex-1 flex flex-col h-screen bg-white dark:bg-gray-950 transition-all\">\n        <Header\n          title={activeConversation?.title || \"OFM Sales AI\"}\n          onHistoryClick={() => setIsSidebarOpen(true)}\n          onThemeToggle={toggleTheme}\n          theme={theme}\n        />\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex flex-col space-y-8 max-w-4xl mx-auto w-full\">\n            {activeConversation ? messages.map((msg, index) => (\n              <ChatMessage key={msg.id || index} msg={msg} />\n            )) : (\n              <div className=\"text-center p-8 text-gray-500 dark:text-gray-400 italic\">\n                Select or start a new conversation from the menu.\n              </div>\n            )}\n            {isLoading && <ChatMessage.Loading />}\n            <div ref={chatEndRef} />\n          </div>\n        </div>\n        <div className=\"p-4 border-t border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950\">\n          <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} disabled={!activeConversationId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nconst App = () => (\n    <ThemeProvider>\n        <ChatInterface />\n    </ThemeProvider>\n);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}