{"ast":null,"code":"var _jsxFileName = \"/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport WelcomeScreen from './WelcomeScreen';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport MessageInput from './MessageInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  var _conversations$active, _conversations$active2;\n  const {\n    theme,\n    toggleTheme\n  } = useTheme();\n  const {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle\n  } = useConversations();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const chatEndRef = useRef(null);\n  const messages = ((_conversations$active = conversations[activeConversationId]) === null || _conversations$active === void 0 ? void 0 : _conversations$active.messages) || [];\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages, isLoading]);\n  const handleSendMessage = async input => {\n    if (!input.trim() || isLoading) return;\n    addMessageToConversation(activeConversationId, {\n      sender: 'user',\n      text: input,\n      type: 'text'\n    });\n    if (messages.length === 1) {\n      // First user message\n      updateConversationTitle(activeConversationId, input);\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: input,\n          conversation_id: activeConversationId\n        })\n      });\n      if (!response.ok) {\n        const err = await response.json();\n        throw new Error(err.detail || `HTTP error!`);\n      }\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n    } catch (error) {\n      addMessageToConversation(activeConversationId, {\n        sender: 'bot',\n        text: `Sorry, an error occurred: ${error.message}.`,\n        type: 'text'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex h-screen bg-white dark:bg-gray-950 text-gray-800 dark:text-gray-200 font-sans antialiased`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: isHistoryOpen,\n      setIsOpen: setIsHistoryOpen,\n      conversations: conversations,\n      activeConversationId: activeConversationId,\n      setActiveConversationId: setActiveConversationId,\n      createNewConversation: createNewConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 flex flex-col items-center relative\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: (_conversations$active2 = conversations[activeConversationId]) === null || _conversations$active2 === void 0 ? void 0 : _conversations$active2.title,\n        onHistoryClick: () => setIsHistoryOpen(true),\n        onThemeToggle: toggleTheme,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 w-full max-w-4xl overflow-y-auto px-4 pb-24 pt-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col space-y-8\",\n          children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            msg: msg\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 65\n          }, this)) : /*#__PURE__*/_jsxDEV(WelcomeScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 106\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(ChatMessage.Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: chatEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"mA0uvLfqSl/zIAPR2dF8/6k/etU=\", false, function () {\n  return [useTheme, useConversations];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useTheme","useConversations","ChatMessage","WelcomeScreen","Sidebar","Header","MessageInput","jsxDEV","_jsxDEV","ChatInterface","_s","_conversations$active","_conversations$active2","theme","toggleTheme","conversations","activeConversationId","setActiveConversationId","createNewConversation","addMessageToConversation","updateConversationTitle","isLoading","setIsLoading","isHistoryOpen","setIsHistoryOpen","chatEndRef","messages","_chatEndRef$current","current","scrollIntoView","behavior","handleSendMessage","input","trim","sender","text","type","length","response","fetch","method","headers","body","JSON","stringify","query","conversation_id","ok","err","json","Error","detail","botResponse","error","message","className","children","isOpen","setIsOpen","fileName","_jsxFileName","lineNumber","columnNumber","title","onHistoryClick","onThemeToggle","map","msg","index","Loading","ref","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatInterface.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { useConversations } from '../hooks/useConversations';\nimport ChatMessage from './ChatMessage';\nimport WelcomeScreen from './WelcomeScreen';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport MessageInput from './MessageInput';\n\nconst ChatInterface = () => {\n  const { theme, toggleTheme } = useTheme();\n  const { \n    conversations, \n    activeConversationId, \n    setActiveConversationId, \n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle\n  } = useConversations();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const chatEndRef = useRef(null);\n\n  const messages = conversations[activeConversationId]?.messages || [];\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isLoading]);\n\n  const handleSendMessage = async (input) => {\n    if (!input.trim() || isLoading) return;\n\n    addMessageToConversation(activeConversationId, { sender: 'user', text: input, type: 'text' });\n    if (messages.length === 1) { // First user message\n        updateConversationTitle(activeConversationId, input);\n    }\n    \n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ query: input, conversation_id: activeConversationId }),\n      });\n\n      if (!response.ok) {\n        const err = await response.json();\n        throw new Error(err.detail || `HTTP error!`);\n      }\n\n      const botResponse = await response.json();\n      addMessageToConversation(activeConversationId, botResponse);\n\n    } catch (error) {\n      addMessageToConversation(activeConversationId, { sender: 'bot', text: `Sorry, an error occurred: ${error.message}.`, type: 'text' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className={`flex h-screen bg-white dark:bg-gray-950 text-gray-800 dark:text-gray-200 font-sans antialiased`}>\n      <Sidebar \n        isOpen={isHistoryOpen}\n        setIsOpen={setIsHistoryOpen}\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        setActiveConversationId={setActiveConversationId}\n        createNewConversation={createNewConversation}\n      />\n      <main className=\"flex-1 flex flex-col items-center relative\">\n        <Header \n          title={conversations[activeConversationId]?.title}\n          onHistoryClick={() => setIsHistoryOpen(true)}\n          onThemeToggle={toggleTheme}\n          theme={theme}\n        />\n        <div className=\"flex-1 w-full max-w-4xl overflow-y-auto px-4 pb-24 pt-8\">\n          <div className=\"flex flex-col space-y-8\">\n            {messages.length > 0 ? messages.map((msg, index) => <ChatMessage key={index} msg={msg} />) : <WelcomeScreen />}\n            {isLoading && <ChatMessage.Loading />}\n            <div ref={chatEndRef} />\n          </div>\n        </div>\n        <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading} />\n      </main>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}