{"ast":null,"code":"var _s = $RefreshSig$();\n// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useLocalStorage('conversations', {});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  useEffect(() => {\n    const conversationKeys = Object.keys(conversations);\n    if (conversationKeys.length === 0) {\n      createNewConversation();\n    } else if (!activeConversationId || !conversations[activeConversationId]) {\n      setActiveConversationId(conversationKeys.sort().reverse()[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const createNewConversation = (title = \"New Conversation\") => {\n    const newId = `conv_${Date.now()}`;\n    const newConversation = {\n      id: newId,\n      title: title,\n      messages: [],\n      file: null\n    };\n    setConversations(prev => ({\n      ...prev,\n      [newId]: newConversation\n    }));\n    setActiveConversationId(newId);\n    return newId;\n  };\n  const addMessageToConversation = (convId, message) => {\n    // Add a unique ID to each message to prevent duplicates\n    const messageWithId = {\n      ...message,\n      id: `msg_${Date.now()}_${Math.random()}`\n    };\n    setConversations(prev => {\n      var _newConversations$con;\n      const newConversations = {\n        ...prev\n      };\n      const currentMessages = ((_newConversations$con = newConversations[convId]) === null || _newConversations$con === void 0 ? void 0 : _newConversations$con.messages) || [];\n\n      // Check if a message with this ID already exists\n      if (!currentMessages.some(m => m.id === messageWithId.id)) {\n        if (newConversations[convId]) {\n          newConversations[convId].messages.push(messageWithId);\n        }\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationFile = (convId, file) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].file = file;\n        newConversations[convId].messages.push({\n          id: `msg_${Date.now()}`,\n          sender: 'bot',\n          text: `Successfully loaded \"${file.name}\".\\n\\nHow can I help you analyze this data?`,\n          type: 'text'\n        });\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationTitle = (convId, title) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].title = title.substring(0, 50);\n      }\n      return newConversations;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationFile,\n    updateConversationTitle\n  };\n};\n_s(useConversations, \"rzF9N77Fnhz6LMLGQDybowyhlDc=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useLocalStorage","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","conversationKeys","Object","keys","length","createNewConversation","sort","reverse","title","newId","Date","now","newConversation","id","messages","file","prev","addMessageToConversation","convId","message","messageWithId","Math","random","_newConversations$con","newConversations","currentMessages","some","m","push","updateConversationFile","sender","text","name","type","updateConversationTitle","substring"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport const useConversations = () => {\n    const [conversations, setConversations] = useLocalStorage('conversations', {});\n    const [activeConversationId, setActiveConversationId] = useState(null);\n\n    useEffect(() => {\n        const conversationKeys = Object.keys(conversations);\n        if (conversationKeys.length === 0) {\n            createNewConversation();\n        } else if (!activeConversationId || !conversations[activeConversationId]) {\n            setActiveConversationId(conversationKeys.sort().reverse()[0]);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const createNewConversation = (title = \"New Conversation\") => {\n        const newId = `conv_${Date.now()}`;\n        const newConversation = {\n            id: newId,\n            title: title,\n            messages: [],\n            file: null\n        };\n        setConversations(prev => ({ ...prev, [newId]: newConversation }));\n        setActiveConversationId(newId);\n        return newId;\n    };\n\n    const addMessageToConversation = (convId, message) => {\n        // Add a unique ID to each message to prevent duplicates\n        const messageWithId = { ...message, id: `msg_${Date.now()}_${Math.random()}` };\n\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            const currentMessages = newConversations[convId]?.messages || [];\n            \n            // Check if a message with this ID already exists\n            if (!currentMessages.some(m => m.id === messageWithId.id)) {\n                 if (newConversations[convId]) {\n                    newConversations[convId].messages.push(messageWithId);\n                }\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationFile = (convId, file) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].file = file;\n                newConversations[convId].messages.push({\n                    id: `msg_${Date.now()}`,\n                    sender: 'bot',\n                    text: `Successfully loaded \"${file.name}\".\\n\\nHow can I help you analyze this data?`,\n                    type: 'text'\n                });\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationTitle = (convId, title) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].title = title.substring(0, 50);\n            }\n            return newConversations;\n        });\n    };\n\n    return {\n        conversations,\n        activeConversationId,\n        setActiveConversationId,\n        createNewConversation,\n        addMessageToConversation,\n        updateConversationFile,\n        updateConversationTitle\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}