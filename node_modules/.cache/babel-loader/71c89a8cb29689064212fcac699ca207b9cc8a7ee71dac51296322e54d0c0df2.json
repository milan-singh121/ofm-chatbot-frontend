{"ast":null,"code":"var _jsxFileName = \"/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatMessage.jsx\";\n// // /frontend/src/components/ChatMessage.jsx\n\n// import React from 'react';\n// import { Bot, User, BarChart2 } from 'lucide-react';\n// // CORRECTED: Added LineChart and Line to the import statement\n// import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n// const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// const renderChart = (msg) => {\n//     if (!msg.chartData || msg.chartData.length === 0) {\n//         return <p className=\"text-red-500\">No data available for this chart.</p>;\n//     }\n\n//     switch (msg.chartType) {\n//         case 'pie':\n//             const pieDataKey = msg.dataKeys[0];\n//             return (\n//                  <PieChart width={400} height={300}>\n//                     <Pie\n//                         data={msg.chartData}\n//                         cx=\"50%\"\n//                         cy=\"50%\"\n//                         labelLine={false}\n//                         label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n//                         outerRadius={100}\n//                         fill=\"#8884d8\"\n//                         dataKey={pieDataKey}\n//                         nameKey=\"name\"\n//                     >\n//                         {msg.chartData.map((entry, index) => (\n//                             <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n//                         ))}\n//                     </Pie>\n//                     <Tooltip formatter={(value) => typeof value === 'number' ? value.toLocaleString() : value} />\n//                     <Legend />\n//                 </PieChart>\n//             );\n//         case 'bar':\n//         case 'line':\n//         default:\n//             // Now LineChart is correctly defined\n//             const ChartComponent = msg.chartType === 'line' ? LineChart : BarChart;\n//             // Now Line is correctly defined\n//             const ChartElement = msg.chartType === 'line' ? Line : Bar;\n//             return (\n//                 <ChartComponent\n//                     width={600}\n//                     height={350}\n//                     data={msg.chartData}\n//                     margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//                 >\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\n//                     <XAxis dataKey=\"name\" />\n//                     <YAxis tickFormatter={(value) => new Intl.NumberFormat('en-US', { notation: 'compact', compactDisplay: 'short' }).format(value)} />\n//                     <Tooltip formatter={(value) => typeof value === 'number' ? value.toLocaleString() : value} />\n//                     <Legend />\n//                     {msg.dataKeys.map((key, index) => (\n//                         <ChartElement key={key} dataKey={key} fill={COLORS[index % COLORS.length]} />\n//                     ))}\n//                 </ChartComponent>\n//             );\n//     }\n// };\n\n// const MessageContent = ({ msg }) => {\n//     switch (msg.type) {\n//         case 'chart':\n//             return (\n//                 <div className=\"mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md\">\n//                     <h4 className=\"font-semibold text-lg mb-2 flex items-center gap-2\">\n//                         <BarChart2 size={20} />\n//                         Visualization\n//                     </h4>\n//                     <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">{msg.text}</p>\n//                     <ResponsiveContainer width=\"100%\" height={350}>\n//                         {renderChart(msg)}\n//                     </ResponsiveContainer>\n//                 </div>\n//             );\n//         case 'error':\n//              return <p className=\"text-red-500\">{msg.text}</p>;\n//         default:\n//             const parts = msg.text.split(/(```[\\s\\S]*?```)/);\n//             return (\n//                 <div>\n//                     {parts.map((part, index) => {\n//                         const match = part.match(/```(\\w*)\\n([\\s\\S]*?)```/);\n//                         if (match) {\n//                             const language = match[1] || 'bash';\n//                             const code = match[2];\n//                             return (\n//                                 <div key={index} className=\"my-2 rounded-md overflow-hidden\">\n//                                 <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n//                                     {code}\n//                                 </SyntaxHighlighter>\n//                                 </div>\n//                             );\n//                         }\n//                         return <p key={index} className=\"whitespace-pre-wrap\">{part}</p>;\n//                     })}\n//                 </div>\n//             );\n//     }\n// };\n\n// const ChatMessage = ({ msg }) => {\n//     const isBot = msg.sender === 'bot';\n//     const Icon = isBot ? Bot : User;\n\n//     return (\n//         <div className={`flex items-start gap-4 ${isBot ? '' : 'flex-row-reverse'}`}>\n//             <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${isBot ? 'bg-blue-500 text-white' : 'bg-gray-300 dark:bg-gray-600'}`}>\n//                 <Icon size={24} />\n//             </div>\n//             <div className={`max-w-xl p-4 rounded-lg ${isBot ? 'bg-gray-100 dark:bg-gray-800' : 'bg-blue-100 dark:bg-blue-900'}`}>\n//                 <MessageContent msg={msg} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// ChatMessage.Loading = () => (\n//     <div className=\"flex items-start gap-4\">\n//         <div className=\"flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center bg-blue-500 text-white\">\n//             <Bot size={24} />\n//         </div>\n//         <div className=\"max-w-xl p-4 rounded-lg bg-gray-100 dark:bg-gray-800\">\n//             <div className=\"flex items-center space-x-2\">\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse [animation-delay:0.2s]\"></div>\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse [animation-delay:0.4s]\"></div>\n//             </div>\n//         </div>\n//     </div>\n// );\n\n// export default ChatMessage;\n\nimport React from 'react';\nimport { Bot, User, AlertTriangle } from 'lucide-react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Chart from './Chart'; // Import the dedicated Chart component\n\n// Component to render the main content of a message\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContent = ({\n  msg\n}) => {\n  switch (msg.type) {\n    case 'chart':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"whitespace-pre-wrap\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          chartData: msg.chartData,\n          dataKeys: msg.dataKeys,\n          chartType: msg.chartType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this);\n    case 'error':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-2 text-red-500\",\n        children: [/*#__PURE__*/_jsxDEV(AlertTriangle, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this);\n    default:\n      // This handles plain text and code blocks within the text\n      const parts = msg.text.split(/(```[\\s\\S]*?```)/g);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: parts.map((part, index) => {\n          const codeBlockMatch = part.match(/```(\\w*)\\n([\\s\\S]*?)```/);\n          if (codeBlockMatch) {\n            const language = codeBlockMatch[1] || 'bash';\n            const code = codeBlockMatch[2].trim();\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"my-2 rounded-md overflow-hidden bg-[#282c34]\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-300 px-4 py-1 bg-gray-700\",\n                children: language\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n                language: language,\n                style: oneDark,\n                customStyle: {\n                  margin: 0\n                },\n                children: code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this);\n          }\n          // Render plain text parts\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"whitespace-pre-wrap\",\n            children: part\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n// The main ChatMessage component\n_c = MessageContent;\nconst ChatMessage = ({\n  msg\n}) => {\n  const isBot = msg.sender === 'bot';\n  const Icon = isBot ? Bot : User;\n  const bubbleStyles = isBot ? 'bg-gray-100 dark:bg-gray-800' : 'bg-blue-500 text-white';\n  const iconStyles = isBot ? 'bg-blue-500 text-white' : 'bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex items-start gap-4 w-full`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${iconStyles}`,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `max-w-2xl p-4 rounded-lg ${bubbleStyles}`,\n      children: /*#__PURE__*/_jsxDEV(MessageContent, {\n        msg: msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n};\n\n// Loading indicator component\n_c2 = ChatMessage;\nChatMessage.Loading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"flex items-start gap-4\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center bg-blue-500 text-white\",\n    children: /*#__PURE__*/_jsxDEV(Bot, {\n      size: 24\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl p-4 rounded-lg bg-gray-100 dark:bg-gray-800\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse [animation-delay:0.2s]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse [animation-delay:0.4s]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 228,\n  columnNumber: 5\n}, this);\nexport default ChatMessage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageContent\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","Bot","User","AlertTriangle","Prism","SyntaxHighlighter","oneDark","Chart","jsxDEV","_jsxDEV","MessageContent","msg","type","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","chartData","dataKeys","chartType","size","parts","split","map","part","index","codeBlockMatch","match","language","code","trim","style","customStyle","margin","_c","ChatMessage","isBot","sender","Icon","bubbleStyles","iconStyles","_c2","Loading","$RefreshReg$"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/components/ChatMessage.jsx"],"sourcesContent":["// // /frontend/src/components/ChatMessage.jsx\n\n// import React from 'react';\n// import { Bot, User, BarChart2 } from 'lucide-react';\n// // CORRECTED: Added LineChart and Line to the import statement\n// import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n// const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// const renderChart = (msg) => {\n//     if (!msg.chartData || msg.chartData.length === 0) {\n//         return <p className=\"text-red-500\">No data available for this chart.</p>;\n//     }\n\n//     switch (msg.chartType) {\n//         case 'pie':\n//             const pieDataKey = msg.dataKeys[0];\n//             return (\n//                  <PieChart width={400} height={300}>\n//                     <Pie\n//                         data={msg.chartData}\n//                         cx=\"50%\"\n//                         cy=\"50%\"\n//                         labelLine={false}\n//                         label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n//                         outerRadius={100}\n//                         fill=\"#8884d8\"\n//                         dataKey={pieDataKey}\n//                         nameKey=\"name\"\n//                     >\n//                         {msg.chartData.map((entry, index) => (\n//                             <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n//                         ))}\n//                     </Pie>\n//                     <Tooltip formatter={(value) => typeof value === 'number' ? value.toLocaleString() : value} />\n//                     <Legend />\n//                 </PieChart>\n//             );\n//         case 'bar':\n//         case 'line':\n//         default:\n//             // Now LineChart is correctly defined\n//             const ChartComponent = msg.chartType === 'line' ? LineChart : BarChart;\n//             // Now Line is correctly defined\n//             const ChartElement = msg.chartType === 'line' ? Line : Bar;\n//             return (\n//                 <ChartComponent\n//                     width={600}\n//                     height={350}\n//                     data={msg.chartData}\n//                     margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n//                 >\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\n//                     <XAxis dataKey=\"name\" />\n//                     <YAxis tickFormatter={(value) => new Intl.NumberFormat('en-US', { notation: 'compact', compactDisplay: 'short' }).format(value)} />\n//                     <Tooltip formatter={(value) => typeof value === 'number' ? value.toLocaleString() : value} />\n//                     <Legend />\n//                     {msg.dataKeys.map((key, index) => (\n//                         <ChartElement key={key} dataKey={key} fill={COLORS[index % COLORS.length]} />\n//                     ))}\n//                 </ChartComponent>\n//             );\n//     }\n// };\n\n\n// const MessageContent = ({ msg }) => {\n//     switch (msg.type) {\n//         case 'chart':\n//             return (\n//                 <div className=\"mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md\">\n//                     <h4 className=\"font-semibold text-lg mb-2 flex items-center gap-2\">\n//                         <BarChart2 size={20} />\n//                         Visualization\n//                     </h4>\n//                     <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">{msg.text}</p>\n//                     <ResponsiveContainer width=\"100%\" height={350}>\n//                         {renderChart(msg)}\n//                     </ResponsiveContainer>\n//                 </div>\n//             );\n//         case 'error':\n//              return <p className=\"text-red-500\">{msg.text}</p>;\n//         default:\n//             const parts = msg.text.split(/(```[\\s\\S]*?```)/);\n//             return (\n//                 <div>\n//                     {parts.map((part, index) => {\n//                         const match = part.match(/```(\\w*)\\n([\\s\\S]*?)```/);\n//                         if (match) {\n//                             const language = match[1] || 'bash';\n//                             const code = match[2];\n//                             return (\n//                                 <div key={index} className=\"my-2 rounded-md overflow-hidden\">\n//                                 <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n//                                     {code}\n//                                 </SyntaxHighlighter>\n//                                 </div>\n//                             );\n//                         }\n//                         return <p key={index} className=\"whitespace-pre-wrap\">{part}</p>;\n//                     })}\n//                 </div>\n//             );\n//     }\n// };\n\n// const ChatMessage = ({ msg }) => {\n//     const isBot = msg.sender === 'bot';\n//     const Icon = isBot ? Bot : User;\n\n//     return (\n//         <div className={`flex items-start gap-4 ${isBot ? '' : 'flex-row-reverse'}`}>\n//             <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${isBot ? 'bg-blue-500 text-white' : 'bg-gray-300 dark:bg-gray-600'}`}>\n//                 <Icon size={24} />\n//             </div>\n//             <div className={`max-w-xl p-4 rounded-lg ${isBot ? 'bg-gray-100 dark:bg-gray-800' : 'bg-blue-100 dark:bg-blue-900'}`}>\n//                 <MessageContent msg={msg} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// ChatMessage.Loading = () => (\n//     <div className=\"flex items-start gap-4\">\n//         <div className=\"flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center bg-blue-500 text-white\">\n//             <Bot size={24} />\n//         </div>\n//         <div className=\"max-w-xl p-4 rounded-lg bg-gray-100 dark:bg-gray-800\">\n//             <div className=\"flex items-center space-x-2\">\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse [animation-delay:0.2s]\"></div>\n//                 <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse [animation-delay:0.4s]\"></div>\n//             </div>\n//         </div>\n//     </div>\n// );\n\n// export default ChatMessage;\n\nimport React from 'react';\nimport { Bot, User, AlertTriangle } from 'lucide-react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Chart from './Chart'; // Import the dedicated Chart component\n\n// Component to render the main content of a message\nconst MessageContent = ({ msg }) => {\n    switch (msg.type) {\n        case 'chart':\n            return (\n                <div className=\"space-y-3\">\n                    {/* Display the text summary that accompanies the chart */}\n                    <p className=\"whitespace-pre-wrap\">{msg.text}</p>\n                    {/* Render the chart using the dedicated, responsive component */}\n                    <Chart\n                        chartData={msg.chartData}\n                        dataKeys={msg.dataKeys}\n                        chartType={msg.chartType}\n                    />\n                </div>\n            );\n        case 'error':\n            return (\n                <div className=\"flex items-center gap-2 text-red-500\">\n                    <AlertTriangle size={20} />\n                    <p>{msg.text}</p>\n                </div>\n            );\n        default:\n            // This handles plain text and code blocks within the text\n            const parts = msg.text.split(/(```[\\s\\S]*?```)/g);\n            return (\n                <div className=\"space-y-2\">\n                    {parts.map((part, index) => {\n                        const codeBlockMatch = part.match(/```(\\w*)\\n([\\s\\S]*?)```/);\n                        if (codeBlockMatch) {\n                            const language = codeBlockMatch[1] || 'bash';\n                            const code = codeBlockMatch[2].trim();\n                            return (\n                                <div key={index} className=\"my-2 rounded-md overflow-hidden bg-[#282c34]\">\n                                    <div className=\"text-xs text-gray-300 px-4 py-1 bg-gray-700\">{language}</div>\n                                    <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n                                        {code}\n                                    </SyntaxHighlighter>\n                                </div>\n                            );\n                        }\n                        // Render plain text parts\n                        return <p key={index} className=\"whitespace-pre-wrap\">{part}</p>;\n                    })}\n                </div>\n            );\n    }\n};\n\n// The main ChatMessage component\nconst ChatMessage = ({ msg }) => {\n    const isBot = msg.sender === 'bot';\n    const Icon = isBot ? Bot : User;\n\n    const bubbleStyles = isBot\n        ? 'bg-gray-100 dark:bg-gray-800'\n        : 'bg-blue-500 text-white';\n\n    const iconStyles = isBot\n        ? 'bg-blue-500 text-white'\n        : 'bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200';\n\n    return (\n        <div className={`flex items-start gap-4 w-full`}>\n            {/* Icon */}\n            <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${iconStyles}`}>\n                <Icon size={24} />\n            </div>\n            {/* Message Bubble */}\n            <div className={`max-w-2xl p-4 rounded-lg ${bubbleStyles}`}>\n                <MessageContent msg={msg} />\n            </div>\n        </div>\n    );\n};\n\n// Loading indicator component\nChatMessage.Loading = () => (\n    <div className=\"flex items-start gap-4\">\n        <div className=\"flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center bg-blue-500 text-white\">\n            <Bot size={24} />\n        </div>\n        <div className=\"max-w-xl p-4 rounded-lg bg-gray-100 dark:bg-gray-800\">\n            <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                <div className=\"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse [animation-delay:0.2s]\"></div>\n                <div className=\"w-2.5 h-2.5 bg-blue-400 rounded-full animate-pulse [animation-delay:0.4s]\"></div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default ChatMessage;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,EAAEC,aAAa,QAAQ,cAAc;AACvD,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,OAAO,QAAQ,gDAAgD;AACxE,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAC;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAChC,QAAQA,GAAG,CAACC,IAAI;IACZ,KAAK,OAAO;MACR,oBACIH,OAAA;QAAKI,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAEtBL,OAAA;UAAGI,SAAS,EAAC,qBAAqB;UAAAC,QAAA,EAAEH,GAAG,CAACI;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEjDV,OAAA,CAACF,KAAK;UACFa,SAAS,EAAET,GAAG,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}