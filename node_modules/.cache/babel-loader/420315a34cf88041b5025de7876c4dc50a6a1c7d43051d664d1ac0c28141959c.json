{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nconst STORAGE_KEY = 'ofm_sales_ai_conversations';\nconst ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation';\nexport function useConversations() {\n  _s();\n  const [conversations, setConversations] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : {};\n    } catch {\n      return {};\n    }\n  });\n  const [activeConversationId, setActiveConversationId] = useState(() => {\n    try {\n      return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n    } catch {\n      return null;\n    }\n  });\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n    } catch {}\n  }, [conversations]);\n  useEffect(() => {\n    try {\n      if (activeConversationId) {\n        localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n      } else {\n        localStorage.removeItem(ACTIVE_CONV_KEY);\n      }\n    } catch {}\n  }, [activeConversationId]);\n  const createNewConversation = (title = 'New Analysis') => {\n    const id = uuidv4();\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        id,\n        title,\n        messages: [{\n          id: uuidv4(),\n          sender: 'bot',\n          text: 'How can I help you?',\n          type: 'text'\n        }]\n      }\n    }));\n    setActiveConversationId(id);\n  };\n  const addMessageToConversation = (id, msg) => {\n    setConversations(prev => {\n      var _prev$id;\n      return {\n        ...prev,\n        [id]: {\n          ...prev[id],\n          messages: [...(((_prev$id = prev[id]) === null || _prev$id === void 0 ? void 0 : _prev$id.messages) || []), {\n            id: uuidv4(),\n            ...msg\n          }]\n        }\n      };\n    });\n  };\n  const updateConversationTitle = (id, newTitle) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        ...prev[id],\n        title: newTitle\n      }\n    }));\n  };\n  const deleteConversation = id => {\n    setConversations(prev => {\n      const newConvs = {\n        ...prev\n      };\n      delete newConvs[id];\n      return newConvs;\n    });\n    setActiveConversationId(prevId => prevId === id ? null : prevId);\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation\n  };\n}\n_s(useConversations, \"arOzva0GbiJM9ImDJcfxEKPrzaU=\");","map":{"version":3,"names":["useState","useEffect","v4","uuidv4","STORAGE_KEY","ACTIVE_CONV_KEY","useConversations","_s","conversations","setConversations","saved","localStorage","getItem","JSON","parse","activeConversationId","setActiveConversationId","setItem","stringify","removeItem","createNewConversation","title","id","prev","messages","sender","text","type","addMessageToConversation","msg","_prev$id","updateConversationTitle","newTitle","deleteConversation","newConvs","prevId"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst STORAGE_KEY = 'ofm_sales_ai_conversations';\nconst ACTIVE_CONV_KEY = 'ofm_sales_ai_active_conversation';\n\nexport function useConversations() {\n  const [conversations, setConversations] = useState(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      return saved ? JSON.parse(saved) : {};\n    } catch {\n      return {};\n    }\n  });\n\n  const [activeConversationId, setActiveConversationId] = useState(() => {\n    try {\n      return localStorage.getItem(ACTIVE_CONV_KEY) || null;\n    } catch {\n      return null;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));\n    } catch {}\n  }, [conversations]);\n\n  useEffect(() => {\n    try {\n      if (activeConversationId) {\n        localStorage.setItem(ACTIVE_CONV_KEY, activeConversationId);\n      } else {\n        localStorage.removeItem(ACTIVE_CONV_KEY);\n      }\n    } catch {}\n  }, [activeConversationId]);\n\n  const createNewConversation = (title = 'New Analysis') => {\n    const id = uuidv4();\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        id,\n        title,\n        messages: [\n          { id: uuidv4(), sender: 'bot', text: 'How can I help you?', type: 'text' },\n        ],\n      },\n    }));\n    setActiveConversationId(id);\n  };\n\n  const addMessageToConversation = (id, msg) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        ...prev[id],\n        messages: [...(prev[id]?.messages || []), { id: uuidv4(), ...msg }],\n      },\n    }));\n  };\n\n  const updateConversationTitle = (id, newTitle) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: { ...prev[id], title: newTitle },\n    }));\n  };\n\n  const deleteConversation = (id) => {\n    setConversations(prev => {\n      const newConvs = { ...prev };\n      delete newConvs[id];\n      return newConvs;\n    });\n    setActiveConversationId(prevId => (prevId === id ? null : prevId));\n  };\n\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}