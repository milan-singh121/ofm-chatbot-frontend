{"ast":null,"code":"var _s = $RefreshSig$();\n// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Helper to create a more unique ID\nconst createUniqueMessageId = () => `msg_${Date.now()}_${Math.random()}`;\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useLocalStorage('conversations', {});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  useEffect(() => {\n    const conversationKeys = Object.keys(conversations);\n    if (conversationKeys.length === 0) {\n      // Don't create a conversation automatically. Let the user upload a file first.\n    } else if (!activeConversationId || !conversations[activeConversationId]) {\n      setActiveConversationId(conversationKeys.sort().reverse()[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const createNewConversation = (title = \"New Conversation\") => {\n    const newId = `conv_${Date.now()}`;\n    const newConversation = {\n      id: newId,\n      title: title,\n      messages: [],\n      fileName: null\n    };\n    setConversations(prev => ({\n      ...prev,\n      [newId]: newConversation\n    }));\n    setActiveConversationId(newId);\n    return newId;\n  };\n  const addMessageToConversation = (convId, message) => {\n    const messageWithId = {\n      ...message,\n      id: createUniqueMessageId()\n    };\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      const targetConversation = newConversations[convId];\n      if (targetConversation) {\n        // This now creates a new conversation object with a new messages array,\n        // which is the correct, immutable way to update state in React.\n        newConversations[convId] = {\n          ...targetConversation,\n          messages: [...targetConversation.messages, messageWithId]\n        };\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationFile = (convId, fileName) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      const targetConversation = newConversations[convId];\n      if (targetConversation) {\n        // Update state immutably to prevent re-render bugs\n        newConversations[convId] = {\n          ...targetConversation,\n          fileName: fileName,\n          messages: [\n          // Start with a clean message history for the new file\n          {\n            id: createUniqueMessageId(),\n            sender: 'bot',\n            text: `Successfully loaded \"${fileName}\".\\n\\nHow can I help you analyze this data?`,\n            type: 'text'\n          }]\n        };\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationTitle = (convId, title) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].title = title.substring(0, 50);\n      }\n      return newConversations;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationFile,\n    updateConversationTitle\n  };\n};\n_s(useConversations, \"rzF9N77Fnhz6LMLGQDybowyhlDc=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useLocalStorage","createUniqueMessageId","Date","now","Math","random","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","conversationKeys","Object","keys","length","sort","reverse","createNewConversation","title","newId","newConversation","id","messages","fileName","prev","addMessageToConversation","convId","message","messageWithId","newConversations","targetConversation","updateConversationFile","sender","text","type","updateConversationTitle","substring"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Helper to create a more unique ID\nconst createUniqueMessageId = () => `msg_${Date.now()}_${Math.random()}`;\n\nexport const useConversations = () => {\n    const [conversations, setConversations] = useLocalStorage('conversations', {});\n    const [activeConversationId, setActiveConversationId] = useState(null);\n\n    useEffect(() => {\n        const conversationKeys = Object.keys(conversations);\n        if (conversationKeys.length === 0) {\n            // Don't create a conversation automatically. Let the user upload a file first.\n        } else if (!activeConversationId || !conversations[activeConversationId]) {\n            setActiveConversationId(conversationKeys.sort().reverse()[0]);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const createNewConversation = (title = \"New Conversation\") => {\n        const newId = `conv_${Date.now()}`;\n        const newConversation = {\n            id: newId,\n            title: title,\n            messages: [],\n            fileName: null\n        };\n        setConversations(prev => ({ ...prev, [newId]: newConversation }));\n        setActiveConversationId(newId);\n        return newId;\n    };\n\n    const addMessageToConversation = (convId, message) => {\n        const messageWithId = { ...message, id: createUniqueMessageId() };\n        \n        setConversations(prev => {\n            const newConversations = { ...prev };\n            const targetConversation = newConversations[convId];\n\n            if (targetConversation) {\n                // This now creates a new conversation object with a new messages array,\n                // which is the correct, immutable way to update state in React.\n                newConversations[convId] = {\n                    ...targetConversation,\n                    messages: [...targetConversation.messages, messageWithId]\n                };\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationFile = (convId, fileName) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            const targetConversation = newConversations[convId];\n\n            if (targetConversation) {\n                // Update state immutably to prevent re-render bugs\n                newConversations[convId] = {\n                    ...targetConversation,\n                    fileName: fileName,\n                    messages: [\n                        // Start with a clean message history for the new file\n                        {\n                            id: createUniqueMessageId(),\n                            sender: 'bot',\n                            text: `Successfully loaded \"${fileName}\".\\n\\nHow can I help you analyze this data?`,\n                            type: 'text'\n                        }\n                    ]\n                };\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationTitle = (convId, title) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].title = title.substring(0, 50);\n            }\n            return newConversations;\n        });\n    };\n\n    return {\n        conversations,\n        activeConversationId,\n        setActiveConversationId,\n        createNewConversation,\n        addMessageToConversation,\n        updateConversationFile,\n        updateConversationTitle\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}