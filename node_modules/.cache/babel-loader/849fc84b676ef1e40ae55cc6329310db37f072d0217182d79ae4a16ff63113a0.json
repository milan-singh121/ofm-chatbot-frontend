{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nexport function useConversations() {\n  _s();\n  const [conversations, setConversations] = useState({});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  const createNewConversation = (title = 'New Analysis') => {\n    const id = uuidv4();\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        id,\n        title,\n        messages: [{\n          id: uuidv4(),\n          sender: 'bot',\n          text: 'How can I help you?',\n          type: 'text'\n        }]\n      }\n    }));\n    setActiveConversationId(id);\n  };\n  const addMessageToConversation = (id, msg) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        ...prev[id],\n        messages: [...(prev[id].messages || []), {\n          id: uuidv4(),\n          ...msg\n        }]\n      }\n    }));\n  };\n  const updateConversationTitle = (id, newTitle) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        ...prev[id],\n        title: newTitle\n      }\n    }));\n  };\n  const deleteConversation = id => {\n    setConversations(prev => {\n      const newConvs = {\n        ...prev\n      };\n      delete newConvs[id];\n      // Set new active chat if needed:\n      const remaining = Object.keys(newConvs);\n      setActiveConversationId(remaining[0] || null);\n      return newConvs;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation\n  };\n}\n_s(useConversations, \"W0hXng9vtnqCtqg8GJG/KFe36zw=\");","map":{"version":3,"names":["useState","v4","uuidv4","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","createNewConversation","title","id","prev","messages","sender","text","type","addMessageToConversation","msg","updateConversationTitle","newTitle","deleteConversation","newConvs","remaining","Object","keys"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport function useConversations() {\n  const [conversations, setConversations] = useState({});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n\n  const createNewConversation = (title = 'New Analysis') => {\n    const id = uuidv4();\n    setConversations(prev => ({\n      ...prev,\n      [id]: { id, title, messages: [{ id: uuidv4(), sender: 'bot', text: 'How can I help you?', type: 'text' }] }\n    }));\n    setActiveConversationId(id);\n  };\n\n  const addMessageToConversation = (id, msg) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        ...prev[id],\n        messages: [...(prev[id].messages || []), { id: uuidv4(), ...msg }]\n      }\n    }));\n  };\n\n  const updateConversationTitle = (id, newTitle) => {\n    setConversations(prev => ({\n      ...prev,\n      [id]: { ...prev[id], title: newTitle }\n    }));\n  };\n\n  const deleteConversation = (id) => {\n    setConversations(prev => {\n      const newConvs = { ...prev };\n      delete newConvs[id];\n      // Set new active chat if needed:\n      const remaining = Object.keys(newConvs);\n      setActiveConversationId(remaining[0] || null);\n      return newConvs;\n    });\n  };\n\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle,\n    deleteConversation,\n  };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAEnC,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACO,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtE,MAAMS,qBAAqB,GAAGA,CAACC,KAAK,GAAG,cAAc,KAAK;IACxD,MAAMC,EAAE,GAAGT,MAAM,CAAC,CAAC;IACnBI,gBAAgB,CAACM,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAACD,EAAE,GAAG;QAAEA,EAAE;QAAED,KAAK;QAAEG,QAAQ,EAAE,CAAC;UAAEF,EAAE,EAAET,MAAM,CAAC,CAAC;UAAEY,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAE,qBAAqB;UAAEC,IAAI,EAAE;QAAO,CAAC;MAAE;IAC5G,CAAC,CAAC,CAAC;IACHR,uBAAuB,CAACG,EAAE,CAAC;EAC7B,CAAC;EAED,MAAMM,wBAAwB,GAAGA,CAACN,EAAE,EAAEO,GAAG,KAAK;IAC5CZ,gBAAgB,CAACM,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAACD,EAAE,GAAG;QACJ,GAAGC,IAAI,CAACD,EAAE,CAAC;QACXE,QAAQ,EAAE,CAAC,IAAID,IAAI,CAACD,EAAE,CAAC,CAACE,QAAQ,IAAI,EAAE,CAAC,EAAE;UAAEF,EAAE,EAAET,MAAM,CAAC,CAAC;UAAE,GAAGgB;QAAI,CAAC;MACnE;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,uBAAuB,GAAGA,CAACR,EAAE,EAAES,QAAQ,KAAK;IAChDd,gBAAgB,CAACM,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAACD,EAAE,GAAG;QAAE,GAAGC,IAAI,CAACD,EAAE,CAAC;QAAED,KAAK,EAAEU;MAAS;IACvC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,kBAAkB,GAAIV,EAAE,IAAK;IACjCL,gBAAgB,CAACM,IAAI,IAAI;MACvB,MAAMU,QAAQ,GAAG;QAAE,GAAGV;MAAK,CAAC;MAC5B,OAAOU,QAAQ,CAACX,EAAE,CAAC;MACnB;MACA,MAAMY,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC;MACvCd,uBAAuB,CAACe,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;MAC7C,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLjB,aAAa;IACbE,oBAAoB;IACpBC,uBAAuB;IACvBC,qBAAqB;IACrBQ,wBAAwB;IACxBE,uBAAuB;IACvBE;EACF,CAAC;AACH;AAACjB,EAAA,CAlDeD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}