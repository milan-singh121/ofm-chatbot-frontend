{"ast":null,"code":"var _s = $RefreshSig$();\n// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Helper to create a unique ID for messages\nconst createUniqueId = (prefix = 'id') => `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useLocalStorage('conversations', {});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n\n  // Effect to set the active conversation when the component mounts or conversations change\n  useEffect(() => {\n    const conversationKeys = Object.keys(conversations);\n    if (conversationKeys.length > 0) {\n      // If there's no active ID, or the active ID is no longer valid, set it to the most recent one.\n      if (!activeConversationId || !conversations[activeConversationId]) {\n        setActiveConversationId(conversationKeys.sort().reverse()[0]);\n      }\n    } else {\n      // If there are no conversations, clear the active ID\n      setActiveConversationId(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Object.keys(conversations).length]); // Rerun only when the number of conversations changes\n\n  const createNewConversation = useCallback((title = \"New Conversation\") => {\n    const newId = createUniqueId('conv');\n    const newConversation = {\n      id: newId,\n      title: title,\n      messages: [\n      // Start every new conversation with a friendly greeting from the bot.\n      {\n        id: createUniqueId('msg'),\n        sender: 'bot',\n        text: `Hello! I'm InsightAI, your dedicated analyst for OFM's sales data. How can I help you explore forecasts, inventory, and sales performance?`,\n        type: 'text'\n      }]\n    };\n\n    // Use functional update to get the latest state\n    setConversations(prev => ({\n      ...prev,\n      [newId]: newConversation\n    }));\n    setActiveConversationId(newId);\n    return newId;\n  }, [setConversations]);\n  const addMessageToConversation = (convId, message) => {\n    if (!convId) return; // Don't add messages if there's no active conversation\n\n    const messageWithId = {\n      ...message,\n      id: createUniqueId('msg')\n    };\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      const targetConversation = newConversations[convId];\n      if (targetConversation) {\n        // Update state immutably by creating new objects/arrays\n        newConversations[convId] = {\n          ...targetConversation,\n          messages: [...targetConversation.messages, messageWithId]\n        };\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationTitle = (convId, title) => {\n    if (!convId) return;\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        // Ensure the title is a string and not too long\n        newConversations[convId].title = String(title).substring(0, 50);\n      }\n      return newConversations;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationTitle\n  };\n};\n_s(useConversations, \"Xi3MN+ZEZx3MzZqxaMrjgo51Xig=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useLocalStorage","createUniqueId","prefix","Date","now","Math","random","toString","substr","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","conversationKeys","Object","keys","length","sort","reverse","createNewConversation","title","newId","newConversation","id","messages","sender","text","type","prev","addMessageToConversation","convId","message","messageWithId","newConversations","targetConversation","updateConversationTitle","String","substring"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Helper to create a unique ID for messages\nconst createUniqueId = (prefix = 'id') => `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\nexport const useConversations = () => {\n    const [conversations, setConversations] = useLocalStorage('conversations', {});\n    const [activeConversationId, setActiveConversationId] = useState(null);\n\n    // Effect to set the active conversation when the component mounts or conversations change\n    useEffect(() => {\n        const conversationKeys = Object.keys(conversations);\n        if (conversationKeys.length > 0) {\n            // If there's no active ID, or the active ID is no longer valid, set it to the most recent one.\n            if (!activeConversationId || !conversations[activeConversationId]) {\n                setActiveConversationId(conversationKeys.sort().reverse()[0]);\n            }\n        } else {\n            // If there are no conversations, clear the active ID\n            setActiveConversationId(null);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [Object.keys(conversations).length]); // Rerun only when the number of conversations changes\n\n    const createNewConversation = useCallback((title = \"New Conversation\") => {\n        const newId = createUniqueId('conv');\n        const newConversation = {\n            id: newId,\n            title: title,\n            messages: [\n                // Start every new conversation with a friendly greeting from the bot.\n                {\n                    id: createUniqueId('msg'),\n                    sender: 'bot',\n                    text: `Hello! I'm InsightAI, your dedicated analyst for OFM's sales data. How can I help you explore forecasts, inventory, and sales performance?`,\n                    type: 'text'\n                }\n            ],\n        };\n        \n        // Use functional update to get the latest state\n        setConversations(prev => ({ ...prev, [newId]: newConversation }));\n        setActiveConversationId(newId);\n        return newId;\n    }, [setConversations]);\n\n    const addMessageToConversation = (convId, message) => {\n        if (!convId) return; // Don't add messages if there's no active conversation\n\n        const messageWithId = { ...message, id: createUniqueId('msg') };\n        \n        setConversations(prev => {\n            const newConversations = { ...prev };\n            const targetConversation = newConversations[convId];\n\n            if (targetConversation) {\n                // Update state immutably by creating new objects/arrays\n                newConversations[convId] = {\n                    ...targetConversation,\n                    messages: [...targetConversation.messages, messageWithId]\n                };\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationTitle = (convId, title) => {\n        if (!convId) return;\n        \n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                // Ensure the title is a string and not too long\n                newConversations[convId].title = String(title).substring(0, 50);\n            }\n            return newConversations;\n        });\n    };\n\n    return {\n        conversations,\n        activeConversationId,\n        setActiveConversationId,\n        createNewConversation,\n        addMessageToConversation,\n        updateConversationTitle\n    };\n};\n"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,eAAe,QAAQ,mBAAmB;;AAEnD;AACA,MAAMC,cAAc,GAAGA,CAACC,MAAM,GAAG,IAAI,KAAK,GAAGA,MAAM,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAE9G,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,eAAe,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;EAC9E,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAEtE;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMiB,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACN,aAAa,CAAC;IACnD,IAAII,gBAAgB,CAACG,MAAM,GAAG,CAAC,EAAE;MAC7B;MACA,IAAI,CAACL,oBAAoB,IAAI,CAACF,aAAa,CAACE,oBAAoB,CAAC,EAAE;QAC/DC,uBAAuB,CAACC,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjE;IACJ,CAAC,MAAM;MACH;MACAN,uBAAuB,CAAC,IAAI,CAAC;IACjC;IACJ;EACA,CAAC,EAAE,CAACE,MAAM,CAACC,IAAI,CAACN,aAAa,CAAC,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzC,MAAMG,qBAAqB,GAAGtB,WAAW,CAAC,CAACuB,KAAK,GAAG,kBAAkB,KAAK;IACtE,MAAMC,KAAK,GAAGtB,cAAc,CAAC,MAAM,CAAC;IACpC,MAAMuB,eAAe,GAAG;MACpBC,EAAE,EAAEF,KAAK;MACTD,KAAK,EAAEA,KAAK;MACZI,QAAQ,EAAE;MACN;MACA;QACID,EAAE,EAAExB,cAAc,CAAC,KAAK,CAAC;QACzB0B,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,4IAA4I;QAClJC,IAAI,EAAE;MACV,CAAC;IAET,CAAC;;IAED;IACAjB,gBAAgB,CAACkB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACP,KAAK,GAAGC;IAAgB,CAAC,CAAC,CAAC;IACjEV,uBAAuB,CAACS,KAAK,CAAC;IAC9B,OAAOA,KAAK;EAChB,CAAC,EAAE,CAACX,gBAAgB,CAAC,CAAC;EAEtB,MAAMmB,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;IAClD,IAAI,CAACD,MAAM,EAAE,OAAO,CAAC;;IAErB,MAAME,aAAa,GAAG;MAAE,GAAGD,OAAO;MAAER,EAAE,EAAExB,cAAc,CAAC,KAAK;IAAE,CAAC;IAE/DW,gBAAgB,CAACkB,IAAI,IAAI;MACrB,MAAMK,gBAAgB,GAAG;QAAE,GAAGL;MAAK,CAAC;MACpC,MAAMM,kBAAkB,GAAGD,gBAAgB,CAACH,MAAM,CAAC;MAEnD,IAAII,kBAAkB,EAAE;QACpB;QACAD,gBAAgB,CAACH,MAAM,CAAC,GAAG;UACvB,GAAGI,kBAAkB;UACrBV,QAAQ,EAAE,CAAC,GAAGU,kBAAkB,CAACV,QAAQ,EAAEQ,aAAa;QAC5D,CAAC;MACL;MACA,OAAOC,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,MAAME,uBAAuB,GAAGA,CAACL,MAAM,EAAEV,KAAK,KAAK;IAC/C,IAAI,CAACU,MAAM,EAAE;IAEbpB,gBAAgB,CAACkB,IAAI,IAAI;MACrB,MAAMK,gBAAgB,GAAG;QAAE,GAAGL;MAAK,CAAC;MACpC,IAAIK,gBAAgB,CAACH,MAAM,CAAC,EAAE;QAC1B;QACAG,gBAAgB,CAACH,MAAM,CAAC,CAACV,KAAK,GAAGgB,MAAM,CAAChB,KAAK,CAAC,CAACiB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;MACnE;MACA,OAAOJ,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IACHxB,aAAa;IACbE,oBAAoB;IACpBC,uBAAuB;IACvBO,qBAAqB;IACrBU,wBAAwB;IACxBM;EACJ,CAAC;AACL,CAAC;AAAC3B,EAAA,CAlFWD,gBAAgB;EAAA,QACiBT,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}