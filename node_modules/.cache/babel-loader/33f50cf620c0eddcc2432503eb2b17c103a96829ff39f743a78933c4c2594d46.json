{"ast":null,"code":"var _s = $RefreshSig$();\n// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useLocalStorage('conversations', {});\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  useEffect(() => {\n    const conversationKeys = Object.keys(conversations);\n    if (conversationKeys.length === 0) {\n      // Don't create a conversation automatically. Let the user upload a file first.\n    } else if (!activeConversationId || !conversations[activeConversationId]) {\n      setActiveConversationId(conversationKeys.sort().reverse()[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const createNewConversation = (title = \"New Conversation\") => {\n    const newId = `conv_${Date.now()}`;\n    const newConversation = {\n      id: newId,\n      title: title,\n      messages: [],\n      fileName: null // Store only the file NAME\n    };\n    setConversations(prev => ({\n      ...prev,\n      [newId]: newConversation\n    }));\n    setActiveConversationId(newId);\n    return newId;\n  };\n  const addMessageToConversation = (convId, message) => {\n    const messageWithId = {\n      ...message,\n      id: `msg_${Date.now()}_${Math.random()}`\n    };\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].messages.push(messageWithId);\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationFile = (convId, fileName) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].fileName = fileName;\n        // Add the initial bot message here, ensuring it only happens once.\n        newConversations[convId].messages.push({\n          id: `msg_${Date.now()}`,\n          sender: 'bot',\n          text: `Successfully loaded \"${fileName}\".\\n\\nHow can I help you analyze this data?`,\n          type: 'text'\n        });\n      }\n      return newConversations;\n    });\n  };\n  const updateConversationTitle = (convId, title) => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      if (newConversations[convId]) {\n        newConversations[convId].title = title.substring(0, 50);\n      }\n      return newConversations;\n    });\n  };\n  return {\n    conversations,\n    activeConversationId,\n    setActiveConversationId,\n    createNewConversation,\n    addMessageToConversation,\n    updateConversationFile,\n    updateConversationTitle\n  };\n};\n_s(useConversations, \"rzF9N77Fnhz6LMLGQDybowyhlDc=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useLocalStorage","useConversations","_s","conversations","setConversations","activeConversationId","setActiveConversationId","conversationKeys","Object","keys","length","sort","reverse","createNewConversation","title","newId","Date","now","newConversation","id","messages","fileName","prev","addMessageToConversation","convId","message","messageWithId","Math","random","newConversations","push","updateConversationFile","sender","text","type","updateConversationTitle","substring"],"sources":["/Users/trentino/Work/OFM/droplet/ofm_chatbot/frontend/src/hooks/useConversations.js"],"sourcesContent":["// /frontend/src/hooks/useConversations.js\n\nimport { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport const useConversations = () => {\n    const [conversations, setConversations] = useLocalStorage('conversations', {});\n    const [activeConversationId, setActiveConversationId] = useState(null);\n\n    useEffect(() => {\n        const conversationKeys = Object.keys(conversations);\n        if (conversationKeys.length === 0) {\n            // Don't create a conversation automatically. Let the user upload a file first.\n        } else if (!activeConversationId || !conversations[activeConversationId]) {\n            setActiveConversationId(conversationKeys.sort().reverse()[0]);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const createNewConversation = (title = \"New Conversation\") => {\n        const newId = `conv_${Date.now()}`;\n        const newConversation = {\n            id: newId,\n            title: title,\n            messages: [],\n            fileName: null // Store only the file NAME\n        };\n        setConversations(prev => ({ ...prev, [newId]: newConversation }));\n        setActiveConversationId(newId);\n        return newId;\n    };\n\n    const addMessageToConversation = (convId, message) => {\n        const messageWithId = { ...message, id: `msg_${Date.now()}_${Math.random()}` };\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].messages.push(messageWithId);\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationFile = (convId, fileName) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].fileName = fileName;\n                // Add the initial bot message here, ensuring it only happens once.\n                newConversations[convId].messages.push({\n                    id: `msg_${Date.now()}`,\n                    sender: 'bot',\n                    text: `Successfully loaded \"${fileName}\".\\n\\nHow can I help you analyze this data?`,\n                    type: 'text'\n                });\n            }\n            return newConversations;\n        });\n    };\n\n    const updateConversationTitle = (convId, title) => {\n        setConversations(prev => {\n            const newConversations = { ...prev };\n            if (newConversations[convId]) {\n                newConversations[convId].title = title.substring(0, 50);\n            }\n            return newConversations;\n        });\n    };\n\n    return {\n        conversations,\n        activeConversationId,\n        setActiveConversationId,\n        createNewConversation,\n        addMessageToConversation,\n        updateConversationFile,\n        updateConversationTitle\n    };\n};\n"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,mBAAmB;AAEnD,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,eAAe,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;EAC9E,MAAM,CAACK,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtEC,SAAS,CAAC,MAAM;IACZ,MAAMQ,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACN,aAAa,CAAC;IACnD,IAAII,gBAAgB,CAACG,MAAM,KAAK,CAAC,EAAE;MAC/B;IAAA,CACH,MAAM,IAAI,CAACL,oBAAoB,IAAI,CAACF,aAAa,CAACE,oBAAoB,CAAC,EAAE;MACtEC,uBAAuB,CAACC,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE;IACJ;EACA,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,qBAAqB,GAAGA,CAACC,KAAK,GAAG,kBAAkB,KAAK;IAC1D,MAAMC,KAAK,GAAG,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAClC,MAAMC,eAAe,GAAG;MACpBC,EAAE,EAAEJ,KAAK;MACTD,KAAK,EAAEA,KAAK;MACZM,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,IAAI,CAAC;IACnB,CAAC;IACDjB,gBAAgB,CAACkB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACP,KAAK,GAAGG;IAAgB,CAAC,CAAC,CAAC;IACjEZ,uBAAuB,CAACS,KAAK,CAAC;IAC9B,OAAOA,KAAK;EAChB,CAAC;EAED,MAAMQ,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;IAClD,MAAMC,aAAa,GAAG;MAAE,GAAGD,OAAO;MAAEN,EAAE,EAAE,OAAOH,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIU,IAAI,CAACC,MAAM,CAAC,CAAC;IAAG,CAAC;IAC9ExB,gBAAgB,CAACkB,IAAI,IAAI;MACrB,MAAMO,gBAAgB,GAAG;QAAE,GAAGP;MAAK,CAAC;MACpC,IAAIO,gBAAgB,CAACL,MAAM,CAAC,EAAE;QAC1BK,gBAAgB,CAACL,MAAM,CAAC,CAACJ,QAAQ,CAACU,IAAI,CAACJ,aAAa,CAAC;MACzD;MACA,OAAOG,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,MAAME,sBAAsB,GAAGA,CAACP,MAAM,EAAEH,QAAQ,KAAK;IACjDjB,gBAAgB,CAACkB,IAAI,IAAI;MACrB,MAAMO,gBAAgB,GAAG;QAAE,GAAGP;MAAK,CAAC;MACpC,IAAIO,gBAAgB,CAACL,MAAM,CAAC,EAAE;QAC1BK,gBAAgB,CAACL,MAAM,CAAC,CAACH,QAAQ,GAAGA,QAAQ;QAC5C;QACAQ,gBAAgB,CAACL,MAAM,CAAC,CAACJ,QAAQ,CAACU,IAAI,CAAC;UACnCX,EAAE,EAAE,OAAOH,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACvBe,MAAM,EAAE,KAAK;UACbC,IAAI,EAAE,wBAAwBZ,QAAQ,6CAA6C;UACnFa,IAAI,EAAE;QACV,CAAC,CAAC;MACN;MACA,OAAOL,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,MAAMM,uBAAuB,GAAGA,CAACX,MAAM,EAAEV,KAAK,KAAK;IAC/CV,gBAAgB,CAACkB,IAAI,IAAI;MACrB,MAAMO,gBAAgB,GAAG;QAAE,GAAGP;MAAK,CAAC;MACpC,IAAIO,gBAAgB,CAACL,MAAM,CAAC,EAAE;QAC1BK,gBAAgB,CAACL,MAAM,CAAC,CAACV,KAAK,GAAGA,KAAK,CAACsB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;MAC3D;MACA,OAAOP,gBAAgB;IAC3B,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IACH1B,aAAa;IACbE,oBAAoB;IACpBC,uBAAuB;IACvBO,qBAAqB;IACrBU,wBAAwB;IACxBQ,sBAAsB;IACtBI;EACJ,CAAC;AACL,CAAC;AAACjC,EAAA,CA1EWD,gBAAgB;EAAA,QACiBD,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}